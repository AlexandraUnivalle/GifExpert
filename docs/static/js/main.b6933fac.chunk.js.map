{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMlB,UACI,iDAAoBD,KACpB,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGCI,MAAQF,GAHT,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QATxB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAe,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEtC,OACI,sBAAKc,UAAW,kDAAhB,UAEI,qBAAKL,GAAIA,EAAKM,IAAMf,EAAMgB,IAAON,IACjC,kCAAMA,SCJLO,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACtB,ECFwB,SAACA,GACzB,MAA2Bd,mBAAS,CAChCqB,KAAM,GACNa,SAAS,IAFb,mBAAQC,EAAR,KAAeC,EAAf,KAyBA,OApBAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAGCH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAKzB,CAACpB,IAQGqB,EDxBwBK,CAAc1B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QASpB,OACI,qCACI,oBAAIJ,UAAU,wCAAd,SACKhB,IAEHoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAGIA,GAFEA,EAAIC,aEpBjBgB,EAAe,WAGxB,MAAsCzC,mBAAS,CAAC,cAAhD,mBAAO0C,EAAP,KAAoB3C,EAApB,KAQA,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADPA,YCblB6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b6933fac.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( {setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n        //console.log(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue,...cats,]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2> Add category, {inputValue}</h2>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n} \r\n","export const getGifs = async (category) => {\r\n        //SOLO Quiere q se ejecute esta funcion getGiffs cuando el componente es renderizado por primera vez\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=0YnOueiE4wbyeajaSQ8lM8GUGp8OYzv4`;\r\n    const resp =  await fetch ( url );\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url : img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n} ","import React from 'react'\r\n\r\nexport const GiftGridItem = ( {id, title, url} ) => {\r\n    //console.log(id, title, url)\r\n    return (\r\n        <div className =\"card animate__animated animate__animate__fadeIn\"  >\r\n            { /*img.title */}\r\n            <img id={id}  src={ url } alt = {title} />\r\n            <p> { title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GiftGridItem } from './GiftGridItem';\r\n\r\nexport const GiftGrid = ({category}) => {\r\n    const {data:images ,loading} = useFetchGifs( category );\r\n    /*\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => setImages(imgs) )\r\n            //.then( setImages);\r\n    }, [ category ])\r\n\r\n*/\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInLeft\">\r\n                {category}\r\n            </h3>\r\n            { loading && <p className=\"animate__animated animate__flash\"> Loading...</p> }\r\n            <div className=\"card-grid\">    \r\n            {\r\n                images.map( img => (\r\n                    <GiftGridItem \r\n                    key={ img.id }\r\n\r\n                    {...img } \r\n                    />\r\n                )) \r\n            }   \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n/*images.map( ( {id, tittle } ) => (\r\n   <li key={id}>\r\n    {title}\r\n</li>  \r\n)) */","import {  useState,useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [ state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                //setTimeout( () => {\r\n                  //  console.log(imgs);\r\n                    setState({\r\n                        data:imgs,\r\n                        loading:false\r\n                    });\r\n               // },3000);\r\n            })\r\n\r\n    }, [category])\r\n\r\n    // setTimeout ( () => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading:false\r\n    //     })\r\n    // }, 3000);\r\n    return state; //data:[]. loading: true]\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GiftGrid } from './components/GiftGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    //const categories = ['One punch', 'Samurai x', 'Dragon Ball'];\r\n    const [categories , setCategories ] = useState(['One punch']);\r\n    /*const handleAdd = () => {\r\n        //setCategories(categories.concat('hunter x'));  \r\n        setCategories(['HUNTER X',...categories]);\r\n        console.log(categories);\r\n        <button onClick={ handleAdd }> Agregar </button>\r\n    } */\r\n    \r\n    return (\r\n        <>\r\n            <h2> GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}></AddCategory>   \r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GiftGrid \r\n                            key={category}\r\n                            category = {category}\r\n                        />\r\n                    )) \r\n                    \r\n                }\r\n            </ol>\r\n        \r\n        </>\r\n\r\n    )\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp'\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}